{"ast":null,"code":"var _jsxFileName = \"E:\\\\visual studio\\\\nodejs\\\\assignment\\\\assignment01\\\\Frontend\\\\src\\\\components\\\\browse\\\\MovieList.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"../../utils/axios\";\nimport movieTrailer from \"movie-trailer\";\nimport MovieDetail from \"../../components/browse/MovieDetail\";\nimport \"./MovieList.css\";\nconst base_url = \"https://image.tmdb.org/t/p/original\";\nconst movies_limit = 10;\nconst user_token = \"8qlOkxz4wq\";\n\nfunction MovieList({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n\n  const handleClick = movie => {\n    if (selectedMovie && selectedMovie.id === movie.id) {\n      setSelectedMovie(null);\n      setTrailerUrl(\"\");\n    } else {\n      setSelectedMovie(movie); //   movieTrailer(movie?.title || \"\")\n      //     .then((url) => {\n      //       const urlParams = new URLSearchParams(new URL(url).search);\n      //       setTrailerUrl(urlParams.get(\"v\"));\n      //     })\n      //     .catch((error) => console.log(error));\n\n      const data = {\n        movieId: movie.id\n      };\n\n      const postTrailer = async () => {\n        await fetch(`http://localhost:5000/api/movies/video/${user_token}`, {\n          method: \"POST\",\n          body: JSON.stringify(data),\n          headers: {\n            \"Content-type\": \"application/json\"\n          }\n        }).then(res => res.json()).then(data => setTrailerUrl(`${data[0].key}`)).catch(err => console.log(err));\n      };\n\n      postTrailer();\n    }\n  }; //   movies.sort((a, b) => b.popularity - a.popularity);\n  //   movies.splice(movies_limit);\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"movie-list-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row_posters sc2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, movies.map(movie => {\n    return /*#__PURE__*/React.createElement(\"img\", {\n      key: movie.id,\n      onClick: () => handleClick(movie),\n      className: `row_poster ${isLargeRow && \"row_posterLarge\"}`,\n      src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n      alt: movie.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: \"40px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, selectedMovie && /*#__PURE__*/React.createElement(MovieDetail, {\n    movieData: selectedMovie,\n    movieTrailer: trailerUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  })));\n}\n\nexport default MovieList;","map":{"version":3,"sources":["E:/visual studio/nodejs/assignment/assignment01/Frontend/src/components/browse/MovieList.jsx"],"names":["React","useState","useEffect","axios","movieTrailer","MovieDetail","base_url","movies_limit","user_token","MovieList","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","selectedMovie","setSelectedMovie","fetchData","request","get","data","results","handleClick","movie","id","movieId","postTrailer","fetch","method","body","JSON","stringify","headers","then","res","json","key","catch","err","console","log","map","poster_path","backdrop_path","name","padding"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"../../utils/axios\";\nimport movieTrailer from \"movie-trailer\";\nimport MovieDetail from \"../../components/browse/MovieDetail\";\nimport \"./MovieList.css\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original\";\nconst movies_limit = 10;\nconst user_token = \"8qlOkxz4wq\";\n\nfunction MovieList({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  const [selectedMovie, setSelectedMovie] = useState(null);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  const handleClick = (movie) => {\n    if (selectedMovie && selectedMovie.id === movie.id) {\n      setSelectedMovie(null);\n      setTrailerUrl(\"\");\n    } else {\n      setSelectedMovie(movie);\n      //   movieTrailer(movie?.title || \"\")\n      //     .then((url) => {\n      //       const urlParams = new URLSearchParams(new URL(url).search);\n      //       setTrailerUrl(urlParams.get(\"v\"));\n      //     })\n      //     .catch((error) => console.log(error));\n      const data = { movieId: movie.id };\n      const postTrailer = async () => {\n        await fetch(`http://localhost:5000/api/movies/video/${user_token}`, {\n          method: \"POST\",\n          body: JSON.stringify(data),\n          headers: { \"Content-type\": \"application/json\" },\n        })\n          .then((res) => res.json())\n          .then((data) => setTrailerUrl(`${data[0].key}`))\n          .catch((err) => console.log(err));\n      };\n      postTrailer();\n    }\n  };\n\n  //   movies.sort((a, b) => b.popularity - a.popularity);\n  //   movies.splice(movies_limit);\n\n  return (\n    <div className=\"row\">\n      <h2 className=\"movie-list-title\">{title}</h2>\n      <div className=\"row_posters sc2\">\n        {movies.map((movie) => {\n          return (\n            <img\n              key={movie.id}\n              onClick={() => handleClick(movie)}\n              className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n              src={`${base_url}${\n                isLargeRow ? movie.poster_path : movie.backdrop_path\n              }`}\n              alt={movie.name}\n            />\n          );\n        })}\n      </div>\n      <div style={{ padding: \"40px\" }}>\n        {selectedMovie && (\n          <MovieDetail movieData={selectedMovie} movieTrailer={trailerUrl} />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default MovieList;\n"]},"metadata":{},"sourceType":"module"}